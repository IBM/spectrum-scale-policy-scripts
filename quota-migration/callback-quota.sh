#!/bin/bash
################################################################################
# The MIT License (MIT)                                                        #
#                                                                              #
# Copyright (c) 2020 Nils Haustein                             				   #
#                                                                              #
# Permission is hereby granted, free of charge, to any person obtaining a copy #
# of this software and associated documentation files (the "Software"), to deal#
# in the Software without restriction, including without limitation the rights #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell    #
# copies of the Software, and to permit persons to whom the Software is        #
# furnished to do so, subject to the following conditions:                     #
#                                                                              #
# The above copyright notice and this permission notice shall be included in   #
# all copies or substantial portions of the Software.                          #
#                                                                              #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR   #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,     #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER       #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,#
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE#
# SOFTWARE.                                                                    #
################################################################################
#
# Program: callback-quota.sh
#
# Description: 
# -------------
# This script along with some policies can accomplish fileset level migration when the quota limit of a fileset is met. 
# Script that can be invoked by a Spectrum Scale callback upon the event softQuotaExceeded.
# Executes a list policies that identifies files that are above the quota limit. 
# Executes a MIGRATE policy that migrates the files identified by the list policy.
#
# Prerequisite:
# -------------
# Filesets should be aligned to file system pools using placement policies
# Fileset quota limits must be configured
# This script along with the required policy files must be available on all manager nodes
# callback catching the event softQuotaExceeded must be configured:
#   mmaddcallback SOFTQUOTA-MIGRATION --command /path/callback-quota.sh --event softQuotaExceeded --parms "%eventName %fsName %filesetName"
#
# Input:
# -------------
# invoked by the callback with the following parameters:
#	eventName: is the event `softQuotaExceeded`
#	fsName: file system name where the event was triggerd for
#	fsetname: fileset name where the event was triggered for. If the event was triggered for the entire file system then the fileset name is `root`. 
#
# Output:
# -------
# Identifies and migrates file for the fileset that triggered the event softQuotaExceeded
# Write runtime information and debugging messages to log file $logF
#
# Change History
# 08/29/19 first implementation 
# 07/21/20 streamlining, removed nodeclass and ssh to node and added migrate policy options
#
#
# ----------------------------------------------------------------------------
# define configurable parameters
# ----------------------------------------------------------------------------
# the workdir must exist on all manager nodes who can become file system manager
workDir="/root/silo/quotamigration"
# name of the file generated by the external list policy
outFile=$workDir"/qFiles"
# name of the LIST policy. The policy files must be accessible on all manager nodes
listPol=$workDir"/quota-listpol.txt"
# name of the MIGRATE policy. The policy files must be accessible on all manager nodes
migPol=$workDir"/quota-migpol.txt"
# the log directory must exist
logDir="/root/silo/quotamigration/log"
# The log file is appended to, you have to take care of logfile rotation
logF=$logDir"/quota-callback.log" 
# define default options for the migration policy run
migPolOpts="-N ltfsee-1 -m 1 -B 1000"
# define the pool name for the EE Pool when migrating to Spectrum Archive EE
eePool="test@eelib1"

# ----------------------------------------------------------------------------
# define constants
# ----------------------------------------------------------------------------
# define GPFS binary path
gpfsPath="/usr/lpp/mmfs/bin"

# ----------------------------------------------------------------------------
# assign parameters given to the script 
# ----------------------------------------------------------------------------
evName=$1
fsName=$2
fsetName=$3


# check prerequisites
if [[ ! -d "$logDir" ]];
then
  echo "ERROR: logging directory $logDir does not exist. exiting." 
  exit 1
fi

# present a banner
echo -e "\n\n==============================================================================" >>  $logF
echo "$(date) Program $0 started on $(hostname)" | tee -a  $logF
echo -e "------------------------------------------------------------------------------"  >> $logF

# check more prerequisites
if [[ ! -d "$workDir" ]];
then
  echo "ERROR: working directory $workDir does not exist. exiting." | tee -a  $logF
  exit 1
fi
if [[ ! -a "$listPol" ]];
then
  echo "ERROR: List policy file $listPol does not exist. exiting." | tee -a  $logF
  exit 1
fi
if [[ ! -a "$migPol" ]];
then
  echo "ERROR: Migrate policy file $MigPol does not exist. exiting." | tee -a  $logF
  exit 1
fi

#check parameters given to the script
if [[ -z $evName ]];
then
  echo "ERROR: event name not specified."  | tee -a $logF
  echo "Syntax: $0 event-name filesystem-name fileset-name" | tee -a $logF
  exit 1
fi
if [[ -z $fsName ]];
then
  echo "ERROR: filesystem name not specified."  | tee -a $logF
  echo "Syntax: $0 event-name filesystem-name fileset-name" | tee -a $logF
  exit 1
fi
if [[ -z $fsetName ]];
then
  echo "ERROR: fileset name not specified."  | tee -a $logF
  echo "Syntax: $0 event-name filesystem-name fileset-name"  | tee -a $logF
  exit 1
fi

echo "INFO: received event $evName for file system $fsName and fileset $fsetName"  | tee -a $logF

# set the name of the output file to qfiles-fsname-fsetname
outFile=$outFile"-"$fsName"-"$fsetName

# delete last output file and invoke list policy
echo "INFO: running list policy for filesystem $fsName and file set $fsetName" >> $logF
rm -f $outFile.list.softquota >> $logF 2>&1
rm -f $outFile.miglist >> $logF 2>&1
$gpfsPath/mmapplypolicy $fsName -P $listPol -f $outFile -M FSETNAME=$fsetName --single-instance -I defer >> $logF 2>&1  
rc=$?
if (( rc != 0 )); then
  echo "ERROR: LIST policy failed with rc=$rc" | tee -a $logF
  exit 1
fi

# run the migrate policy, the output file name is $outFile.list.softquota
rc=0
if [[ ! -a "$outFile.list.softquota" ]]; then
  echo >> $logF
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" >> $logF
  echo "WARNING: no outputfile ($outFile) has been created, skipping migration." | tee -a $logF
  echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" >> $logF
else
  echo >> $logF
  # prepare input file list ($outFile.miglist) for migrate policy by extracting the file names
  awk -F '[ ]' '{ for(i=7; i<=NF; i++) printf "%s",$i (i==NF?ORS:OFS) }' $outFile.list.softquota > $outFile.miglist
  
  # if eepool is set then use this pool for migration, if not it might have been set in the migrate policy
  if [[ ! -z $eePool ]]; then
    echo "INFO: running migration for fileset $fsetName using policy: $migPol, input file: $outFile.miglist and options: $migPolOpts -M EEPOOL=-p $eePool" >> $logF
    $gpfsPath/mmapplypolicy $fsName -P $migPol --single-instance -M FSETNAME=$fsetName -i $outFile.miglist $migPolOpts -M EEPOOL="-p $eePool" >> $logF 2>&1
    rc=$?
  else
    echo "INFO: running migration for fileset $fsetName using policy: $migPol, input file: $outFile.miglist and options: $migPolOpts" >> $logF
    $gpfsPath/mmapplypolicy $fsName -P $migPol --single-instance -M FSETNAME=$fsetName -i $outFile.miglist $migPolOpts  >> $logF 2>&1
    rc=$?
  fi
fi

exitrc=0
if (( rc != 0 )); then
  echo "ERROR: MIGRATE policy failed with rc=$rc" | tee -a $logF
  exitrc=1
fi


echo >> $logF
echo "INFO: $(date) Program finished on node $(hostname)" | tee -a $logF
echo >> $logF

exit $exitrc

